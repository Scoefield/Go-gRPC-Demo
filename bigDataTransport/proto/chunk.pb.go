// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chunk.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ChunkRequest struct {
	Md5                  string   `protobuf:"bytes,1,opt,name=md5,proto3" json:"md5,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChunkRequest) Reset()         { *m = ChunkRequest{} }
func (m *ChunkRequest) String() string { return proto.CompactTextString(m) }
func (*ChunkRequest) ProtoMessage()    {}
func (*ChunkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c46bd41e8571bd, []int{0}
}

func (m *ChunkRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChunkRequest.Unmarshal(m, b)
}
func (m *ChunkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChunkRequest.Marshal(b, m, deterministic)
}
func (m *ChunkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkRequest.Merge(m, src)
}
func (m *ChunkRequest) XXX_Size() int {
	return xxx_messageInfo_ChunkRequest.Size(m)
}
func (m *ChunkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkRequest proto.InternalMessageInfo

func (m *ChunkRequest) GetMd5() string {
	if m != nil {
		return m.Md5
	}
	return ""
}

type ChunkResponse struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChunkResponse) Reset()         { *m = ChunkResponse{} }
func (m *ChunkResponse) String() string { return proto.CompactTextString(m) }
func (*ChunkResponse) ProtoMessage()    {}
func (*ChunkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c46bd41e8571bd, []int{1}
}

func (m *ChunkResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChunkResponse.Unmarshal(m, b)
}
func (m *ChunkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChunkResponse.Marshal(b, m, deterministic)
}
func (m *ChunkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChunkResponse.Merge(m, src)
}
func (m *ChunkResponse) XXX_Size() int {
	return xxx_messageInfo_ChunkResponse.Size(m)
}
func (m *ChunkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChunkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChunkResponse proto.InternalMessageInfo

func (m *ChunkResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type FileRequest struct {
	Filename             string   `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileRequest) Reset()         { *m = FileRequest{} }
func (m *FileRequest) String() string { return proto.CompactTextString(m) }
func (*FileRequest) ProtoMessage()    {}
func (*FileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c46bd41e8571bd, []int{2}
}

func (m *FileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileRequest.Unmarshal(m, b)
}
func (m *FileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileRequest.Marshal(b, m, deterministic)
}
func (m *FileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileRequest.Merge(m, src)
}
func (m *FileRequest) XXX_Size() int {
	return xxx_messageInfo_FileRequest.Size(m)
}
func (m *FileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FileRequest proto.InternalMessageInfo

func (m *FileRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type FileResponse struct {
	Filedata             []byte   `protobuf:"bytes,1,opt,name=filedata,proto3" json:"filedata,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileResponse) Reset()         { *m = FileResponse{} }
func (m *FileResponse) String() string { return proto.CompactTextString(m) }
func (*FileResponse) ProtoMessage()    {}
func (*FileResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_67c46bd41e8571bd, []int{3}
}

func (m *FileResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileResponse.Unmarshal(m, b)
}
func (m *FileResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileResponse.Marshal(b, m, deterministic)
}
func (m *FileResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileResponse.Merge(m, src)
}
func (m *FileResponse) XXX_Size() int {
	return xxx_messageInfo_FileResponse.Size(m)
}
func (m *FileResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FileResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FileResponse proto.InternalMessageInfo

func (m *FileResponse) GetFiledata() []byte {
	if m != nil {
		return m.Filedata
	}
	return nil
}

func init() {
	proto.RegisterType((*ChunkRequest)(nil), "pb.ChunkRequest")
	proto.RegisterType((*ChunkResponse)(nil), "pb.ChunkResponse")
	proto.RegisterType((*FileRequest)(nil), "pb.FileRequest")
	proto.RegisterType((*FileResponse)(nil), "pb.FileResponse")
}

func init() { proto.RegisterFile("chunk.proto", fileDescriptor_67c46bd41e8571bd) }

var fileDescriptor_67c46bd41e8571bd = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0xce, 0x28, 0xcd,
	0xcb, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52, 0xe0, 0xe2, 0x71,
	0x06, 0x09, 0x05, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x09, 0x70, 0x31, 0xe7, 0xa6, 0x98,
	0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0x98, 0x4a, 0xca, 0x5c, 0xbc, 0x50, 0x15, 0xc5,
	0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x42, 0x42, 0x5c, 0x2c, 0x29, 0x89, 0x25, 0x89, 0x60, 0x35, 0x3c,
	0x41, 0x60, 0xb6, 0x92, 0x26, 0x17, 0xb7, 0x5b, 0x66, 0x4e, 0x2a, 0xcc, 0x14, 0x29, 0x2e, 0x8e,
	0xb4, 0xcc, 0x9c, 0xd4, 0xbc, 0xc4, 0xdc, 0x54, 0xa8, 0x51, 0x70, 0xbe, 0x92, 0x16, 0x17, 0x0f,
	0x44, 0x29, 0xd4, 0x38, 0xa8, 0x5a, 0x24, 0x23, 0xe1, 0x7c, 0xa3, 0x12, 0x2e, 0x0e, 0xb0, 0xdd,
	0xc1, 0x45, 0x65, 0x42, 0xc6, 0x5c, 0x1c, 0xee, 0xa9, 0x25, 0x60, 0xae, 0x90, 0x80, 0x5e, 0x41,
	0x92, 0x1e, 0xb2, 0xbb, 0xa5, 0x04, 0x91, 0x44, 0x20, 0x06, 0x2b, 0x31, 0x18, 0x30, 0x0a, 0x19,
	0x73, 0x71, 0xb9, 0xa7, 0x96, 0x44, 0x65, 0x16, 0x80, 0xac, 0x14, 0xe2, 0x07, 0x29, 0x42, 0x72,
	0xa7, 0x94, 0x00, 0x42, 0x00, 0xa1, 0x29, 0x89, 0x0d, 0x1c, 0x3c, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x54, 0x23, 0xfd, 0xb1, 0x2d, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChunkSrvClient is the client API for ChunkSrv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChunkSrvClient interface {
	GetChunk(ctx context.Context, in *ChunkRequest, opts ...grpc.CallOption) (ChunkSrv_GetChunkClient, error)
	GetZipFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (ChunkSrv_GetZipFileClient, error)
}

type chunkSrvClient struct {
	cc *grpc.ClientConn
}

func NewChunkSrvClient(cc *grpc.ClientConn) ChunkSrvClient {
	return &chunkSrvClient{cc}
}

func (c *chunkSrvClient) GetChunk(ctx context.Context, in *ChunkRequest, opts ...grpc.CallOption) (ChunkSrv_GetChunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChunkSrv_serviceDesc.Streams[0], "/pb.ChunkSrv/GetChunk", opts...)
	if err != nil {
		return nil, err
	}
	x := &chunkSrvGetChunkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChunkSrv_GetChunkClient interface {
	Recv() (*ChunkResponse, error)
	grpc.ClientStream
}

type chunkSrvGetChunkClient struct {
	grpc.ClientStream
}

func (x *chunkSrvGetChunkClient) Recv() (*ChunkResponse, error) {
	m := new(ChunkResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chunkSrvClient) GetZipFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (ChunkSrv_GetZipFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChunkSrv_serviceDesc.Streams[1], "/pb.ChunkSrv/GetZipFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &chunkSrvGetZipFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChunkSrv_GetZipFileClient interface {
	Recv() (*FileResponse, error)
	grpc.ClientStream
}

type chunkSrvGetZipFileClient struct {
	grpc.ClientStream
}

func (x *chunkSrvGetZipFileClient) Recv() (*FileResponse, error) {
	m := new(FileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChunkSrvServer is the server API for ChunkSrv service.
type ChunkSrvServer interface {
	GetChunk(*ChunkRequest, ChunkSrv_GetChunkServer) error
	GetZipFile(*FileRequest, ChunkSrv_GetZipFileServer) error
}

// UnimplementedChunkSrvServer can be embedded to have forward compatible implementations.
type UnimplementedChunkSrvServer struct {
}

func (*UnimplementedChunkSrvServer) GetChunk(req *ChunkRequest, srv ChunkSrv_GetChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method GetChunk not implemented")
}
func (*UnimplementedChunkSrvServer) GetZipFile(req *FileRequest, srv ChunkSrv_GetZipFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetZipFile not implemented")
}

func RegisterChunkSrvServer(s *grpc.Server, srv ChunkSrvServer) {
	s.RegisterService(&_ChunkSrv_serviceDesc, srv)
}

func _ChunkSrv_GetChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChunkRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChunkSrvServer).GetChunk(m, &chunkSrvGetChunkServer{stream})
}

type ChunkSrv_GetChunkServer interface {
	Send(*ChunkResponse) error
	grpc.ServerStream
}

type chunkSrvGetChunkServer struct {
	grpc.ServerStream
}

func (x *chunkSrvGetChunkServer) Send(m *ChunkResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChunkSrv_GetZipFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChunkSrvServer).GetZipFile(m, &chunkSrvGetZipFileServer{stream})
}

type ChunkSrv_GetZipFileServer interface {
	Send(*FileResponse) error
	grpc.ServerStream
}

type chunkSrvGetZipFileServer struct {
	grpc.ServerStream
}

func (x *chunkSrvGetZipFileServer) Send(m *FileResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ChunkSrv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ChunkSrv",
	HandlerType: (*ChunkSrvServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetChunk",
			Handler:       _ChunkSrv_GetChunk_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetZipFile",
			Handler:       _ChunkSrv_GetZipFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chunk.proto",
}
